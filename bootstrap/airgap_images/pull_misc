#!/bin/bash

## harbor
DEST_DIRECTORY=/tmp/harbor-images
DEST_TAR=/tmp/harbor-images.tar.gz 

HARBOR_RELEASE=1.9.3

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

# Add harbor repo
helm repo add harbor https://helm.goharbor.io
helm repo update 

# Grab the list of images and download them (requires docker, grep, sed, and awk)
for image in $(helm template harbor/harbor --version ${HARBOR_RELEASE} | grep 'image:' | sed 's/"//g' | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|goharbor/|TARGET_REGISTRY/goharbor/|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/harbor-image.XXXXXXX)
    img_id_num=${img_dir: -20}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY

## longhorn
DEST_DIRECTORY=/tmp/longhorn-images
DEST_TAR=/tmp/longhorn-images.tar.gz 

LONGHORN_RELEASE=1.3.1

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

# Add harbor repo
helm repo add longhorn https://charts.longhorn.io
helm repo update 

# Grab the list of images and download them (requires docker, grep, sed, and awk)
for image in $(helm template longhorn/longhorn --version ${LONGHORN_RELEASE} | grep 'image:' | sed -e 's/^[ \t]*//' | sort --unique | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|longhornio/|TARGET_REGISTRY/longhornio/|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/longhorn-image.XXXXXXX)
    img_id_num=${img_dir: -22}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY

## loki
DEST_DIRECTORY=/tmp/loki-images
DEST_TAR=/tmp/loki-images.tar.gz 

LOKI_RELEASE=3.2.1

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

# Add harbor repo
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update 

# Grab the list of images and download them (requires docker, grep, sed, and awk)
for image in $(helm template grafana/loki --version ${LOKI_RELEASE} | grep 'image:' | sed -e 's/^[ \t]*//' | sed 's/"//g' | sort --unique | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|busybox|TARGET_REGISTRY/grafana/busybox|g")
    dest_image=$(echo $image | sed "s|nginxinc|grafana|g")
    dest_image=$(echo $dest_image | sed "s|docker.io/|TARGET_REGISTRY/|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/loki-image.XXXXXXX)
    img_id_num=${img_dir: -18}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY

## fluentbit
DEST_DIRECTORY=/tmp/fluentbit-images
DEST_TAR=/tmp/fluentbit-images.tar.gz 

FLUENTBIT_RELEASE=0.20.9

if [[ -d "$DEST_DIRECTORY" ]]; then
    echo "ERROR: Directory '$DEST_DIRECTORY' exists."
    echo "Change or delete it before running."
    exit 1
fi

if [[ -d "$DEST_TAR" ]]; then
    echo "ERROR: Directory '$DEST_TAR' exists."
    echo "Change or delete it before running."
    exit 1
fi
mkdir -p "$DEST_DIRECTORY"

# Add harbor repo
helm repo add fluent https://fluent.github.io/helm-charts
helm repo update 

# Grab the list of images and download them (requires docker, grep, sed, and awk)
for image in $(helm template fluent/fluent-bit --version ${FLUENTBIT_RELEASE} | grep 'image:' | sed -e 's/^[ \t]*//' | sed 's/"//g' | sort --unique | awk '{ print $2 }'); do
    source_image=$image
    dest_image=$(echo $image | sed "s|busybox|TARGET_REGISTRY/fluent/busybox|g")
    dest_image=$(echo $dest_image | sed "s|cr.fluentbit.io|TARGET_REGISTRY|g")

    # Create manifest to use during load
    img_dir=$(mktemp -d $DEST_DIRECTORY/fluentbit-image.XXXXXXX)
    img_id_num=${img_dir: -23}
    echo "$img_id_num|$dest_image" >> $DEST_DIRECTORY/manifest.txt

    # Save image locally
    printf "Exporting $source_image\n"
    cosign save --dir "$img_dir" $source_image
done

# Compress directory
tar zcf "$DEST_TAR" -C "$DEST_DIRECTORY" .

# Clean up working directory
rm -rf $DEST_DIRECTORY